{"version":3,"file":"material__tree.js","sources":["../../../../../../src/components-examples/material/tree/tree-checklist/tree-checklist-example.ts","../../../../../../src/components-examples/material/tree/tree-checklist/tree-checklist-example.html","../../../../../../src/components-examples/material/tree/index.ts"],"sourcesContent":["import {SelectionModel} from '@angular/cdk/collections';\nimport {FlatTreeControl} from '@angular/cdk/tree';\nimport {Component, Injectable} from '@angular/core';\nimport {MatTreeFlatDataSource, MatTreeFlattener} from '@angular/material/tree';\nimport {BehaviorSubject} from 'rxjs';\n\n/**\n * Node for to-do item\n */\nexport class TodoItemNode {\n  children: TodoItemNode[];\n  item: string;\n}\n\n/** Flat to-do item node with expandable and level information */\nexport class TodoItemFlatNode {\n  item: string;\n  level: number;\n  expandable: boolean;\n}\n\n/**\n * The Json object for to-do list data.\n */\nconst TREE_DATA = {\n  Groceries: {\n    'Almond Meal flour': null,\n    'Organic eggs': null,\n    'Protein Powder': null,\n    Fruits: {\n      Apple: null,\n      Berries: ['Blueberry', 'Raspberry'],\n      Orange: null\n    }\n  },\n  Reminders: [\n    'Cook dinner',\n    'Read the Material Design spec',\n    'Upgrade Application to Angular'\n  ]\n};\n\n/**\n * Checklist database, it can build a tree structured Json object.\n * Each node in Json object represents a to-do item or a category.\n * If a node is a category, it has children items and new items can be added under the category.\n */\n@Injectable()\nexport class ChecklistDatabase {\n  dataChange = new BehaviorSubject<TodoItemNode[]>([]);\n\n  get data(): TodoItemNode[] { return this.dataChange.value; }\n\n  constructor() {\n    this.initialize();\n  }\n\n  initialize() {\n    // Build the tree nodes from Json object. The result is a list of `TodoItemNode` with nested\n    //     file node as children.\n    const data = this.buildFileTree(TREE_DATA, 0);\n\n    // Notify the change.\n    this.dataChange.next(data);\n  }\n\n  /**\n   * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n   * The return value is the list of `TodoItemNode`.\n   */\n  buildFileTree(obj: {[key: string]: any}, level: number): TodoItemNode[] {\n    return Object.keys(obj).reduce<TodoItemNode[]>((accumulator, key) => {\n      const value = obj[key];\n      const node = new TodoItemNode();\n      node.item = key;\n\n      if (value != null) {\n        if (typeof value === 'object') {\n          node.children = this.buildFileTree(value, level + 1);\n        } else {\n          node.item = value;\n        }\n      }\n\n      return accumulator.concat(node);\n    }, []);\n  }\n\n  /** Add an item to to-do list */\n  insertItem(parent: TodoItemNode, name: string) {\n    if (parent.children) {\n      parent.children.push({item: name} as TodoItemNode);\n      this.dataChange.next(this.data);\n    }\n  }\n\n  updateItem(node: TodoItemNode, name: string) {\n    node.item = name;\n    this.dataChange.next(this.data);\n  }\n}\n\n/**\n * @title Tree with checkboxes\n */\n@Component({\n  selector: 'tree-checklist-example',\n  templateUrl: 'tree-checklist-example.html',\n  styleUrls: ['tree-checklist-example.css'],\n  providers: [ChecklistDatabase]\n})\nexport class TreeChecklistExample {\n  /** Map from flat node to nested node. This helps us finding the nested node to be modified */\n  flatNodeMap = new Map<TodoItemFlatNode, TodoItemNode>();\n\n  /** Map from nested node to flattened node. This helps us to keep the same object for selection */\n  nestedNodeMap = new Map<TodoItemNode, TodoItemFlatNode>();\n\n  /** A selected parent node to be inserted */\n  selectedParent: TodoItemFlatNode | null = null;\n\n  /** The new item's name */\n  newItemName = '';\n\n  treeControl: FlatTreeControl<TodoItemFlatNode>;\n\n  treeFlattener: MatTreeFlattener<TodoItemNode, TodoItemFlatNode>;\n\n  dataSource: MatTreeFlatDataSource<TodoItemNode, TodoItemFlatNode>;\n\n  /** The selection for checklist */\n  checklistSelection = new SelectionModel<TodoItemFlatNode>(true /* multiple */);\n\n  constructor(private _database: ChecklistDatabase) {\n    this.treeFlattener = new MatTreeFlattener(this.transformer, this.getLevel,\n      this.isExpandable, this.getChildren);\n    this.treeControl = new FlatTreeControl<TodoItemFlatNode>(this.getLevel, this.isExpandable);\n    this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n    _database.dataChange.subscribe(data => {\n      this.dataSource.data = data;\n    });\n  }\n\n  getLevel = (node: TodoItemFlatNode) => node.level;\n\n  isExpandable = (node: TodoItemFlatNode) => node.expandable;\n\n  getChildren = (node: TodoItemNode): TodoItemNode[] => node.children;\n\n  hasChild = (_: number, _nodeData: TodoItemFlatNode) => _nodeData.expandable;\n\n  hasNoContent = (_: number, _nodeData: TodoItemFlatNode) => _nodeData.item === '';\n\n  /**\n   * Transformer to convert nested node to flat node. Record the nodes in maps for later use.\n   */\n  transformer = (node: TodoItemNode, level: number) => {\n    const existingNode = this.nestedNodeMap.get(node);\n    const flatNode = existingNode && existingNode.item === node.item\n        ? existingNode\n        : new TodoItemFlatNode();\n    flatNode.item = node.item;\n    flatNode.level = level;\n    flatNode.expandable = !!node.children;\n    this.flatNodeMap.set(flatNode, node);\n    this.nestedNodeMap.set(node, flatNode);\n    return flatNode;\n  }\n\n  /** Whether all the descendants of the node are selected. */\n  descendantsAllSelected(node: TodoItemFlatNode): boolean {\n    const descendants = this.treeControl.getDescendants(node);\n    const descAllSelected = descendants.every(child =>\n      this.checklistSelection.isSelected(child)\n    );\n    return descAllSelected;\n  }\n\n  /** Whether part of the descendants are selected */\n  descendantsPartiallySelected(node: TodoItemFlatNode): boolean {\n    const descendants = this.treeControl.getDescendants(node);\n    const result = descendants.some(child => this.checklistSelection.isSelected(child));\n    return result && !this.descendantsAllSelected(node);\n  }\n\n  /** Toggle the to-do item selection. Select/deselect all the descendants node */\n  todoItemSelectionToggle(node: TodoItemFlatNode): void {\n    this.checklistSelection.toggle(node);\n    const descendants = this.treeControl.getDescendants(node);\n    this.checklistSelection.isSelected(node)\n      ? this.checklistSelection.select(...descendants)\n      : this.checklistSelection.deselect(...descendants);\n\n    // Force update for the parent\n    descendants.every(child =>\n      this.checklistSelection.isSelected(child)\n    );\n    this.checkAllParentsSelection(node);\n  }\n\n  /** Toggle a leaf to-do item selection. Check all the parents to see if they changed */\n  todoLeafItemSelectionToggle(node: TodoItemFlatNode): void {\n    this.checklistSelection.toggle(node);\n    this.checkAllParentsSelection(node);\n  }\n\n  /* Checks all the parents when a leaf node is selected/unselected */\n  checkAllParentsSelection(node: TodoItemFlatNode): void {\n    let parent: TodoItemFlatNode | null = this.getParentNode(node);\n    while (parent) {\n      this.checkRootNodeSelection(parent);\n      parent = this.getParentNode(parent);\n    }\n  }\n\n  /** Check root node checked state and change it accordingly */\n  checkRootNodeSelection(node: TodoItemFlatNode): void {\n    const nodeSelected = this.checklistSelection.isSelected(node);\n    const descendants = this.treeControl.getDescendants(node);\n    const descAllSelected = descendants.every(child =>\n      this.checklistSelection.isSelected(child)\n    );\n    if (nodeSelected && !descAllSelected) {\n      this.checklistSelection.deselect(node);\n    } else if (!nodeSelected && descAllSelected) {\n      this.checklistSelection.select(node);\n    }\n  }\n\n  /* Get the parent node of a node */\n  getParentNode(node: TodoItemFlatNode): TodoItemFlatNode | null {\n    const currentLevel = this.getLevel(node);\n\n    if (currentLevel < 1) {\n      return null;\n    }\n\n    const startIndex = this.treeControl.dataNodes.indexOf(node) - 1;\n\n    for (let i = startIndex; i >= 0; i--) {\n      const currentNode = this.treeControl.dataNodes[i];\n\n      if (this.getLevel(currentNode) < currentLevel) {\n        return currentNode;\n      }\n    }\n    return null;\n  }\n\n  /** Select the category so we can insert the new item. */\n  addNewItem(node: TodoItemFlatNode) {\n    const parentNode = this.flatNodeMap.get(node);\n    this._database.insertItem(parentNode!, '');\n    this.treeControl.expand(node);\n  }\n\n  /** Save the node to database */\n  saveNode(node: TodoItemFlatNode, itemValue: string) {\n    const nestedNode = this.flatNodeMap.get(node);\n    this._database.updateItem(nestedNode!, itemValue);\n  }\n}\n","<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n  <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodeToggle matTreeNodePadding>\n    <button mat-icon-button disabled></button>\n    <mat-checkbox class=\"checklist-leaf-node\"\n                  [checked]=\"checklistSelection.isSelected(node)\"\n                  (change)=\"todoLeafItemSelectionToggle(node)\">{{node.item}}</mat-checkbox>\n  </mat-tree-node>\n\n  <mat-tree-node *matTreeNodeDef=\"let node; when: hasNoContent\" matTreeNodePadding>\n    <button mat-icon-button disabled></button>\n    <mat-form-field>\n      <input matInput #itemValue placeholder=\"New item...\">\n    </mat-form-field>\n    <button mat-button (click)=\"saveNode(node, itemValue.value)\">Save</button>\n  </mat-tree-node>\n\n  <mat-tree-node *matTreeNodeDef=\"let node; when: hasChild\" matTreeNodePadding>\n    <button mat-icon-button matTreeNodeToggle\n            [attr.aria-label]=\"'toggle ' + node.filename\">\n      <mat-icon class=\"mat-icon-rtl-mirror\">\n        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n      </mat-icon>\n    </button>\n    <mat-checkbox [checked]=\"descendantsAllSelected(node)\"\n                  [indeterminate]=\"descendantsPartiallySelected(node)\"\n                  (change)=\"todoItemSelectionToggle(node)\">{{node.item}}</mat-checkbox>\n    <button mat-icon-button (click)=\"addNewItem(node)\"><mat-icon>add</mat-icon></button>\n  </mat-tree-node>\n</mat-tree>\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {MatTreeModule} from '@angular/material/tree';\nimport {TreeChecklistExample} from './tree-checklist/tree-checklist-example';\n\nexport {\n  TreeChecklistExample,\n};\n\nconst EXAMPLES = [\n  TreeChecklistExample,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatCheckboxModule,\n    MatIconModule,\n    MatInputModule,\n    MatProgressBarModule,\n    MatTreeModule,\n  ],\n  declarations: EXAMPLES,\n  exports: EXAMPLES,\n})\nexport class TreeExamplesModule {\n}\n"],"names":["i0.ɵɵelementStart","i0.ɵɵelement","i0.ɵɵlistener","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵadvance","i0.ɵɵproperty","i0.ɵɵtextInterpolate","i0.ɵɵattribute","i0.ɵɵtextInterpolate1","i0.ɵɵtemplate"],"mappings":"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"}