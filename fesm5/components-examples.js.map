{"version":3,"file":"components-examples.js","sources":["../../../../../../../src/components/footer/footer-model.ts","../../../../../../../src/components/core/common-behaviors/nav-model.ts","../../../../../../../src/components/core/common-behaviors/nav-helper.ts","../../../../../../../src/components/core/common-behaviors/index.ts","../../../../../../../src/components/core/public-api.ts","../../../../../../../src/components/core/index.ts","../../../../../../../src/components/footer/footer.ts","../../../../../../../src/components/footer/footer.html","../../../../../../../src/components/footer/footer-module.ts","../../../../../../../src/components/footer/public-api.ts","../../../../../../../src/components/footer/index.ts","../../../../../../../../src/components-examples/components/footer/footer-overview/footer-overview-example.ts","../../../../../../../../src/components-examples/components/footer/footer-overview/footer-overview-example.html","../../../../../../../../src/components-examples/components/footer/index.ts","../../../../../../../../src/components-examples/material/tree/tree-checklist/tree-checklist-example.html","../../../../../../../../src/components-examples/material/tree/tree-checklist/tree-checklist-example.ts","../../../../../../../../src/components-examples/material/tree/tree-dynamic/tree-dynamic-example.html","../../../../../../../../src/components-examples/material/tree/tree-dynamic/tree-dynamic-example.ts","../../../../../../../../src/components-examples/material/tree/tree-flat-overview/tree-flat-overview-example.html","../../../../../../../../src/components-examples/material/tree/tree-flat-overview/tree-flat-overview-example.ts","../../../../../../../../src/components-examples/material/tree/tree-loadmore/tree-loadmore-example.ts","../../../../../../../../src/components-examples/material/tree/tree-loadmore/tree-loadmore-example.html","../../../../../../../../src/components-examples/material/tree/tree-nested-overview/tree-nested-overview-example.html","../../../../../../../../src/components-examples/material/tree/tree-nested-overview/tree-nested-overview-example.ts","../../../../../../../../src/components-examples/material/tree/index.ts","../../../../example-module.ts","../../../../../../src/components-examples/example-data.ts","../../../../../../src/components-examples/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {INavigationLink, NavigationMode} from '@gsa-sam/components/core';\n\nexport class FooterModel {\n  /**\n   * List of sections and their links\n   */\n  linkSections: FooterLinkSection[];\n\n  /**\n   * Footer text and logo\n   */\n\n  footerLogo?: FooterLogo;\n}\n\nexport class FooterLinkSection {\n  /**\n   * Title text for the section\n   */\n  text: string;\n\n  /**\n   * Links in the section\n   */\n  links: FooterLink[];\n}\n\nexport class FooterLink implements INavigationLink {\n  /**\n   * Internal Angualr Routes, External HREF, EVENT: event on parent component\n   */\n  mode: NavigationMode;\n\n  /**\n   * Text to be displayed in the link\n   */\n  text: string;\n\n  /**\n   * Navigation Route\n   */\n  route: string;\n}\n\nexport interface FooterLogo {\n  /**\n   * Text for the Header\n   */\n\n  text: string;\n\n  /**\n   * Image Source Path for the Image button\n   */\n\n  imageSourcePath: string;\n\n  /**\n   * Alt text for image\n   */\n\n  imageAltText: string;\n}\n","export interface INavigationLink {\n  /** Text to be displayed in the link */\n  text: string;\n\n  /** Navigation Route */\n  route: string;\n\n  /** Internal Angualr Routes, External HREF, EVENT: event on parent component */\n  mode: NavigationMode;\n}\n\nexport enum NavigationMode {\n  INTERNAL,\n  EXTERNAL,\n  EVENT,\n  LABEL\n}\n\nexport interface Selectable {\n  /** Identifier for the item when search for selected */\n  id: string;\n\n  /** Status of if the item is selected */\n  selected?: boolean;\n}\n","import {INavigationLink, NavigationMode} from './nav-model';\nexport class NavigationHelper {\n\n    /**\n     * checks if link is internal\n     * @param link \n     */\n    isLinkInternal(link: INavigationLink) {\n        return link.mode === NavigationMode.INTERNAL;\n    }\n\n    /**\n     * checks if link is external\n     * @param link \n     */\n    isLinkExternal(link: INavigationLink) {\n        return link.mode === NavigationMode.EXTERNAL;\n    }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './nav-model';\nexport * from './nav-helper';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './common-behaviors/index';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport {FooterModel} from './footer-model';\nimport {INavigationLink, NavigationHelper} from '@gsa-sam/components/core';\n\n@Component({\n  selector: 'sds-footer',\n  templateUrl: './footer.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SdsFooter {\n  /** Navigation helper */\n  navigationHelper = new NavigationHelper();\n\n  /** Model used for the different display portions of the footer */\n  @Input() model: FooterModel;\n\n  /** Event for event based */\n  @Output()\n  linkEvent = new EventEmitter<INavigationLink>();\n\n  /**\n   * Link clicked and emits the link data into an event\n   * @param link\n   */\n  linkClickEvent(link: INavigationLink) {\n    this.linkEvent.emit(link);\n    return false;\n  }\n}\n","<footer class=\"usa-footer usa-footer--big\" role=\"contentinfo\">\n  <div class=\"usa-footer__primary-section\">\n    <div class=\"grid-container\">\n      <div class=\"grid-row grid-gap\">\n        <div class=\"mobile-lg:grid-col-12 tablet:grid-col-4\">\n          <div\n            class=\"usa-footer__logo grid-row mobile-lg:grid-gap-1 margin-top-3\"\n          >\n            <div\n              class=\"mobile-lg:grid-col-3 mobile-lg:grid-offset-3 tablet:grid-offset-none tablet:grid-col-auto\"\n            >\n              <img\n                *ngIf=\"model.footerLogo\"\n                class=\"usa-footer__logo-img\"\n                [attr.src]=\"model.footerLogo.imageSourcePath\"\n                [attr.alt]=\"model.footerLogo.imageAltText\"\n              />\n              <a\n                *ngIf=\"!model.footerLogo\"\n                class=\"usa-footer__logo-text\"\n                target=\"_blank\"\n                href=\"http://gsa.gov\"\n              >\n                GSA.gov\n              </a>\n            </div>\n            <div class=\"mobile-lg:grid-col-4 tablet:grid-col-auto\">\n              <span class=\"usa-footer__logo-heading\">\n                {{\n                  model.footerLogo?.text || 'General Services Administration'\n                }}\n              </span>\n            </div>\n          </div>\n        </div>\n        <div class=\"mobile-lg:grid-col-12 tablet:grid-col-8\">\n          <nav class=\"usa-footer__nav\">\n            <div class=\"grid-row grid-gap-4\">\n              <div\n                class=\"mobile-lg:grid-col-12 desktop:grid-col-4\"\n                *ngFor=\"let section of model.linkSections\"\n              >\n                <section\n                  class=\"usa-footer__primary-content usa-footer__primary-content--collapsible\"\n                >\n                  <span class=\"usa-footer__primary-link\">{{\n                    section.text\n                  }}</span>\n                  <ul class=\"usa-list usa-list--unstyled\">\n                    <li\n                      class=\"usa-footer__secondary-link\"\n                      *ngFor=\"let link of section.links\"\n                    >\n                      <ng-container\n                        [ngTemplateOutlet]=\"\n                          navigationHelper.isLinkInternal(link)\n                            ? footerRouteLinkTemplate\n                            : navigationHelper.isLinkExternal(link)\n                            ? footerHREFLinkTemplate\n                            : footerEVENTLinkTemplate\n                        \"\n                        [ngTemplateOutletContext]=\"{ $implicit: link }\"\n                      ></ng-container>\n                    </li>\n                  </ul>\n                </section>\n              </div>\n            </div>\n          </nav>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"usa-footer__secondary-section\">\n    <div class=\"grid-container\">\n      <div class=\"grid-row\">\n        <div class=\"grid-col-12\">\n          <p class=\"font-body-2xs line-height-sans-4 margin-top-0\">\n            This is a U.S. General Services Administration Federal Government\n            computer system that is\n            <strong>\"FOR OFFICIAL USE ONLY.\"</strong> This system is subject to\n            monitoring. Individuals found performing unauthorized activities are\n            subject to disciplinary action including criminal prosecution.\n          </p>\n        </div>\n      </div>\n    </div>\n  </div>\n</footer>\n\n<ng-template #footerRouteLinkTemplate let-link>\n  <a [routerLink]=\"[link.route]\">{{ link.text }}</a>\n</ng-template>\n\n<ng-template #footerHREFLinkTemplate let-link>\n  <a [attr.href]=\"[link.route]\">{{ link.text }}</a>\n</ng-template>\n\n<ng-template #footerEVENTLinkTemplate let-link>\n  <a href=\"javascript:void(0)\" (click)=\"linkClickEvent(link)\">{{\n    link.text\n  }}</a>\n</ng-template>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {RouterModule} from '@angular/router';\nimport {SdsFooter} from './footer';\n\n@NgModule({\n  imports: [CommonModule, FormsModule, RouterModule],\n  exports: [SdsFooter],\n  declarations: [SdsFooter],\n})\nexport class SdsFooterModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './footer-module';\nexport * from './footer';\nexport * from './footer-model';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n","import {Component, OnInit} from '@angular/core';\nimport {FooterModel} from '@gsa-sam/components/footer';\nimport {NavigationMode} from '@gsa-sam/components/core';\nimport {BehaviorSubject} from 'rxjs';\n\n/**\n * @title Footer overview\n */\n@Component({\n  selector: 'footer-overview-example',\n  templateUrl: 'footer-overview-example.html',\n  styleUrls: ['footer-overview-example.css']\n})\nexport class FooterOverviewExample implements OnInit{\n  constructor() {}\n  linkEvent = new BehaviorSubject<object>({});\n\n  modelFooter: FooterModel = {\n    linkSections: [\n      {\n        text: 'About beta.SAM.gov',\n        links: [\n          {\n            text: 'Explore Our Community',\n            route: '/',\n            mode: NavigationMode.INTERNAL\n          },\n          { text: 'Release Notes', route: '/', mode: NavigationMode.INTERNAL }\n        ]\n      },\n      {\n        text: 'Our Partners',\n        links: [\n          { text: 'Aquisition.gov', route: '/', mode: NavigationMode.INTERNAL },\n          {\n            text: 'USASpending.gov',\n            route: '/',\n            mode: NavigationMode.INTERNAL\n          },\n          { text: 'Grants.gov', route: '/', mode: NavigationMode.INTERNAL },\n          { text: 'More Partners', route: '/', mode: NavigationMode.INTERNAL }\n        ]\n      },\n      {\n        text: 'Customer Service',\n        links: [\n          {\n            text: 'Learning Center',\n            route: '/',\n            mode: NavigationMode.INTERNAL\n          },\n          {\n            text: 'Contact Federal Service Desk',\n            route: '/',\n            mode: NavigationMode.INTERNAL\n          },\n          { text: 'Resources', route: '/', mode: NavigationMode.INTERNAL },\n          {\n            text: 'Freedom of Information Act',\n            route: '/',\n            mode: NavigationMode.INTERNAL\n          }\n        ]\n      }\n    ]\n  };\n\n  ngOnInit() {\n    this.linkEvent.subscribe(value => {\n      console.log('Link Event Clicked Change');\n      console.log(value);\n    });\n  }\n}\n","<sds-footer [model]=\"modelFooter\" (linkEvent)=\"linkEvent.next($event)\"></sds-footer>\n","import {NgModule} from '@angular/core';\nimport {SdsFooterModule} from '@gsa-sam/components/footer';\nimport {FooterOverviewExample} from './footer-overview/footer-overview-example';\n\nexport {FooterOverviewExample};\n\nconst EXAMPLES = [\n  FooterOverviewExample,\n];\n\n@NgModule({\n  imports: [\n    SdsFooterModule\n  ],\n  declarations: EXAMPLES,\n  exports: EXAMPLES,\n})\nexport class FooterExamplesModule {\n}\n","<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n  <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodeToggle matTreeNodePadding>\n    <button mat-icon-button disabled></button>\n    <mat-checkbox class=\"checklist-leaf-node\"\n                  [checked]=\"checklistSelection.isSelected(node)\"\n                  (change)=\"todoLeafItemSelectionToggle(node)\">{{node.item}}</mat-checkbox>\n  </mat-tree-node>\n\n  <mat-tree-node *matTreeNodeDef=\"let node; when: hasNoContent\" matTreeNodePadding>\n    <button mat-icon-button disabled></button>\n    <mat-form-field>\n      <input matInput #itemValue placeholder=\"New item...\">\n    </mat-form-field>\n    <button mat-button (click)=\"saveNode(node, itemValue.value)\">Save</button>\n  </mat-tree-node>\n\n  <mat-tree-node *matTreeNodeDef=\"let node; when: hasChild\" matTreeNodePadding>\n    <button mat-icon-button matTreeNodeToggle\n            [attr.aria-label]=\"'toggle ' + node.filename\">\n      <mat-icon class=\"mat-icon-rtl-mirror\">\n        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n      </mat-icon>\n    </button>\n    <mat-checkbox [checked]=\"descendantsAllSelected(node)\"\n                  [indeterminate]=\"descendantsPartiallySelected(node)\"\n                  (change)=\"todoItemSelectionToggle(node)\">{{node.item}}</mat-checkbox>\n    <button mat-icon-button (click)=\"addNewItem(node)\"><mat-icon>add</mat-icon></button>\n  </mat-tree-node>\n</mat-tree>\n","import {SelectionModel} from '@angular/cdk/collections';\nimport {FlatTreeControl} from '@angular/cdk/tree';\nimport {Component, Injectable} from '@angular/core';\nimport {MatTreeFlatDataSource, MatTreeFlattener} from '@angular/material/tree';\nimport {BehaviorSubject} from 'rxjs';\n\n/**\n * Node for to-do item\n */\nexport class TodoItemNode {\n  children: TodoItemNode[];\n  item: string;\n}\n\n/** Flat to-do item node with expandable and level information */\nexport class TodoItemFlatNode {\n  item: string;\n  level: number;\n  expandable: boolean;\n}\n\n/**\n * The Json object for to-do list data.\n */\nconst TREE_DATA = {\n  Groceries: {\n    'Almond Meal flour': null,\n    'Organic eggs': null,\n    'Protein Powder': null,\n    Fruits: {\n      Apple: null,\n      Berries: ['Blueberry', 'Raspberry'],\n      Orange: null\n    }\n  },\n  Reminders: [\n    'Cook dinner',\n    'Read the Material Design spec',\n    'Upgrade Application to Angular'\n  ]\n};\n\n/**\n * Checklist database, it can build a tree structured Json object.\n * Each node in Json object represents a to-do item or a category.\n * If a node is a category, it has children items and new items can be added under the category.\n */\n@Injectable()\nexport class ChecklistDatabase {\n  dataChange = new BehaviorSubject<TodoItemNode[]>([]);\n\n  get data(): TodoItemNode[] { return this.dataChange.value; }\n\n  constructor() {\n    this.initialize();\n  }\n\n  initialize() {\n    // Build the tree nodes from Json object. The result is a list of `TodoItemNode` with nested\n    //     file node as children.\n    const data = this.buildFileTree(TREE_DATA, 0);\n\n    // Notify the change.\n    this.dataChange.next(data);\n  }\n\n  /**\n   * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n   * The return value is the list of `TodoItemNode`.\n   */\n  buildFileTree(obj: {[key: string]: any}, level: number): TodoItemNode[] {\n    return Object.keys(obj).reduce<TodoItemNode[]>((accumulator, key) => {\n      const value = obj[key];\n      const node = new TodoItemNode();\n      node.item = key;\n\n      if (value != null) {\n        if (typeof value === 'object') {\n          node.children = this.buildFileTree(value, level + 1);\n        } else {\n          node.item = value;\n        }\n      }\n\n      return accumulator.concat(node);\n    }, []);\n  }\n\n  /** Add an item to to-do list */\n  insertItem(parent: TodoItemNode, name: string) {\n    if (parent.children) {\n      parent.children.push({item: name} as TodoItemNode);\n      this.dataChange.next(this.data);\n    }\n  }\n\n  updateItem(node: TodoItemNode, name: string) {\n    node.item = name;\n    this.dataChange.next(this.data);\n  }\n}\n\n/**\n * @title Tree with checkboxes\n */\n@Component({\n  selector: 'tree-checklist-example',\n  templateUrl: 'tree-checklist-example.html',\n  styleUrls: ['tree-checklist-example.css'],\n  providers: [ChecklistDatabase]\n})\nexport class TreeChecklistExample {\n  /** Map from flat node to nested node. This helps us finding the nested node to be modified */\n  flatNodeMap = new Map<TodoItemFlatNode, TodoItemNode>();\n\n  /** Map from nested node to flattened node. This helps us to keep the same object for selection */\n  nestedNodeMap = new Map<TodoItemNode, TodoItemFlatNode>();\n\n  /** A selected parent node to be inserted */\n  selectedParent: TodoItemFlatNode | null = null;\n\n  /** The new item's name */\n  newItemName = '';\n\n  treeControl: FlatTreeControl<TodoItemFlatNode>;\n\n  treeFlattener: MatTreeFlattener<TodoItemNode, TodoItemFlatNode>;\n\n  dataSource: MatTreeFlatDataSource<TodoItemNode, TodoItemFlatNode>;\n\n  /** The selection for checklist */\n  checklistSelection = new SelectionModel<TodoItemFlatNode>(true /* multiple */);\n\n  constructor(private _database: ChecklistDatabase) {\n    this.treeFlattener = new MatTreeFlattener(this.transformer, this.getLevel,\n      this.isExpandable, this.getChildren);\n    this.treeControl = new FlatTreeControl<TodoItemFlatNode>(this.getLevel, this.isExpandable);\n    this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n    _database.dataChange.subscribe(data => {\n      this.dataSource.data = data;\n    });\n  }\n\n  getLevel = (node: TodoItemFlatNode) => node.level;\n\n  isExpandable = (node: TodoItemFlatNode) => node.expandable;\n\n  getChildren = (node: TodoItemNode): TodoItemNode[] => node.children;\n\n  hasChild = (_: number, _nodeData: TodoItemFlatNode) => _nodeData.expandable;\n\n  hasNoContent = (_: number, _nodeData: TodoItemFlatNode) => _nodeData.item === '';\n\n  /**\n   * Transformer to convert nested node to flat node. Record the nodes in maps for later use.\n   */\n  transformer = (node: TodoItemNode, level: number) => {\n    const existingNode = this.nestedNodeMap.get(node);\n    const flatNode = existingNode && existingNode.item === node.item\n        ? existingNode\n        : new TodoItemFlatNode();\n    flatNode.item = node.item;\n    flatNode.level = level;\n    flatNode.expandable = !!node.children;\n    this.flatNodeMap.set(flatNode, node);\n    this.nestedNodeMap.set(node, flatNode);\n    return flatNode;\n  }\n\n  /** Whether all the descendants of the node are selected. */\n  descendantsAllSelected(node: TodoItemFlatNode): boolean {\n    const descendants = this.treeControl.getDescendants(node);\n    const descAllSelected = descendants.every(child =>\n      this.checklistSelection.isSelected(child)\n    );\n    return descAllSelected;\n  }\n\n  /** Whether part of the descendants are selected */\n  descendantsPartiallySelected(node: TodoItemFlatNode): boolean {\n    const descendants = this.treeControl.getDescendants(node);\n    const result = descendants.some(child => this.checklistSelection.isSelected(child));\n    return result && !this.descendantsAllSelected(node);\n  }\n\n  /** Toggle the to-do item selection. Select/deselect all the descendants node */\n  todoItemSelectionToggle(node: TodoItemFlatNode): void {\n    this.checklistSelection.toggle(node);\n    const descendants = this.treeControl.getDescendants(node);\n    this.checklistSelection.isSelected(node)\n      ? this.checklistSelection.select(...descendants)\n      : this.checklistSelection.deselect(...descendants);\n\n    // Force update for the parent\n    descendants.every(child =>\n      this.checklistSelection.isSelected(child)\n    );\n    this.checkAllParentsSelection(node);\n  }\n\n  /** Toggle a leaf to-do item selection. Check all the parents to see if they changed */\n  todoLeafItemSelectionToggle(node: TodoItemFlatNode): void {\n    this.checklistSelection.toggle(node);\n    this.checkAllParentsSelection(node);\n  }\n\n  /* Checks all the parents when a leaf node is selected/unselected */\n  checkAllParentsSelection(node: TodoItemFlatNode): void {\n    let parent: TodoItemFlatNode | null = this.getParentNode(node);\n    while (parent) {\n      this.checkRootNodeSelection(parent);\n      parent = this.getParentNode(parent);\n    }\n  }\n\n  /** Check root node checked state and change it accordingly */\n  checkRootNodeSelection(node: TodoItemFlatNode): void {\n    const nodeSelected = this.checklistSelection.isSelected(node);\n    const descendants = this.treeControl.getDescendants(node);\n    const descAllSelected = descendants.every(child =>\n      this.checklistSelection.isSelected(child)\n    );\n    if (nodeSelected && !descAllSelected) {\n      this.checklistSelection.deselect(node);\n    } else if (!nodeSelected && descAllSelected) {\n      this.checklistSelection.select(node);\n    }\n  }\n\n  /* Get the parent node of a node */\n  getParentNode(node: TodoItemFlatNode): TodoItemFlatNode | null {\n    const currentLevel = this.getLevel(node);\n\n    if (currentLevel < 1) {\n      return null;\n    }\n\n    const startIndex = this.treeControl.dataNodes.indexOf(node) - 1;\n\n    for (let i = startIndex; i >= 0; i--) {\n      const currentNode = this.treeControl.dataNodes[i];\n\n      if (this.getLevel(currentNode) < currentLevel) {\n        return currentNode;\n      }\n    }\n    return null;\n  }\n\n  /** Select the category so we can insert the new item. */\n  addNewItem(node: TodoItemFlatNode) {\n    const parentNode = this.flatNodeMap.get(node);\n    this._database.insertItem(parentNode!, '');\n    this.treeControl.expand(node);\n  }\n\n  /** Save the node to database */\n  saveNode(node: TodoItemFlatNode, itemValue: string) {\n    const nestedNode = this.flatNodeMap.get(node);\n    this._database.updateItem(nestedNode!, itemValue);\n  }\n}\n","<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n  <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodePadding>\n    <button mat-icon-button disabled></button>\n    {{node.item}}\n  </mat-tree-node>\n  <mat-tree-node *matTreeNodeDef=\"let node; when: hasChild\" matTreeNodePadding>\n    <button mat-icon-button\n            [attr.aria-label]=\"'toggle ' + node.filename\" matTreeNodeToggle>\n      <mat-icon class=\"mat-icon-rtl-mirror\">\n        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n      </mat-icon>\n    </button>\n    {{node.item}}\n    <mat-progress-bar *ngIf=\"node.isLoading\"\n                      mode=\"indeterminate\"\n                      class=\"example-tree-progress-bar\"></mat-progress-bar>\n  </mat-tree-node>\n</mat-tree>\n","import {CollectionViewer, SelectionChange, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl} from '@angular/cdk/tree';\nimport {Component, Injectable} from '@angular/core';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n/** Flat node with expandable and level information */\nexport class DynamicFlatNode {\n  constructor(public item: string, public level = 1, public expandable = false,\n              public isLoading = false) {}\n}\n\n/**\n * Database for dynamic data. When expanding a node in the tree, the data source will need to fetch\n * the descendants data from the database.\n */\nexport class DynamicDatabase {\n  dataMap = new Map<string, string[]>([\n    ['Fruits', ['Apple', 'Orange', 'Banana']],\n    ['Vegetables', ['Tomato', 'Potato', 'Onion']],\n    ['Apple', ['Fuji', 'Macintosh']],\n    ['Onion', ['Yellow', 'White', 'Purple']]\n  ]);\n\n  rootLevelNodes: string[] = ['Fruits', 'Vegetables'];\n\n  /** Initial data from database */\n  initialData(): DynamicFlatNode[] {\n    return this.rootLevelNodes.map(name => new DynamicFlatNode(name, 0, true));\n  }\n\n  getChildren(node: string): string[] | undefined {\n    return this.dataMap.get(node);\n  }\n\n  isExpandable(node: string): boolean {\n    return this.dataMap.has(node);\n  }\n}\n/**\n * File database, it can build a tree structured Json object from string.\n * Each node in Json object represents a file or a directory. For a file, it has filename and type.\n * For a directory, it has filename and children (a list of files or directories).\n * The input will be a json object string, and the output is a list of `FileNode` with nested\n * structure.\n */\n@Injectable()\nexport class DynamicDataSource implements DataSource<DynamicFlatNode> {\n\n  dataChange = new BehaviorSubject<DynamicFlatNode[]>([]);\n\n  get data(): DynamicFlatNode[] { return this.dataChange.value; }\n  set data(value: DynamicFlatNode[]) {\n    this._treeControl.dataNodes = value;\n    this.dataChange.next(value);\n  }\n\n  constructor(private _treeControl: FlatTreeControl<DynamicFlatNode>,\n              private _database: DynamicDatabase) {}\n\n  connect(collectionViewer: CollectionViewer): Observable<DynamicFlatNode[]> {\n    this._treeControl.expansionModel.changed.subscribe(change => {\n      if ((change as SelectionChange<DynamicFlatNode>).added ||\n        (change as SelectionChange<DynamicFlatNode>).removed) {\n        this.handleTreeControl(change as SelectionChange<DynamicFlatNode>);\n      }\n    });\n\n    return merge(collectionViewer.viewChange, this.dataChange).pipe(map(() => this.data));\n  }\n\n  disconnect(collectionViewer: CollectionViewer): void {}\n\n  /** Handle expand/collapse behaviors */\n  handleTreeControl(change: SelectionChange<DynamicFlatNode>) {\n    if (change.added) {\n      change.added.forEach(node => this.toggleNode(node, true));\n    }\n    if (change.removed) {\n      change.removed.slice().reverse().forEach(node => this.toggleNode(node, false));\n    }\n  }\n\n  /**\n   * Toggle the node, remove from display list\n   */\n  toggleNode(node: DynamicFlatNode, expand: boolean) {\n    const children = this._database.getChildren(node.item);\n    const index = this.data.indexOf(node);\n    if (!children || index < 0) { // If no children, or cannot find the node, no op\n      return;\n    }\n\n    node.isLoading = true;\n\n    setTimeout(() => {\n      if (expand) {\n        const nodes = children.map(name =>\n          new DynamicFlatNode(name, node.level + 1, this._database.isExpandable(name)));\n        this.data.splice(index + 1, 0, ...nodes);\n      } else {\n        let count = 0;\n        for (let i = index + 1; i < this.data.length\n          && this.data[i].level > node.level; i++, count++) {}\n        this.data.splice(index + 1, count);\n      }\n\n      // notify the change\n      this.dataChange.next(this.data);\n      node.isLoading = false;\n    }, 1000);\n  }\n}\n\n/**\n * @title Tree with dynamic data\n */\n@Component({\n  selector: 'tree-dynamic-example',\n  templateUrl: 'tree-dynamic-example.html',\n  styleUrls: ['tree-dynamic-example.css'],\n  providers: [DynamicDatabase]\n})\nexport class TreeDynamicExample {\n  constructor(database: DynamicDatabase) {\n    this.treeControl = new FlatTreeControl<DynamicFlatNode>(this.getLevel, this.isExpandable);\n    this.dataSource = new DynamicDataSource(this.treeControl, database);\n\n    this.dataSource.data = database.initialData();\n  }\n\n  treeControl: FlatTreeControl<DynamicFlatNode>;\n\n  dataSource: DynamicDataSource;\n\n  getLevel = (node: DynamicFlatNode) => node.level;\n\n  isExpandable = (node: DynamicFlatNode) => node.expandable;\n\n  hasChild = (_: number, _nodeData: DynamicFlatNode) => _nodeData.expandable;\n}\n","<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n  <!-- This is the tree node template for leaf nodes -->\n  <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodePadding>\n    <!-- use a disabled button to provide padding for tree leaf -->\n    <button mat-icon-button disabled></button>\n    {{node.name}}\n  </mat-tree-node>\n  <!-- This is the tree node template for expandable nodes -->\n  <mat-tree-node *matTreeNodeDef=\"let node;when: hasChild\" matTreeNodePadding>\n    <button mat-icon-button matTreeNodeToggle\n            [attr.aria-label]=\"'toggle ' + node.name\">\n      <mat-icon class=\"mat-icon-rtl-mirror\">\n        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n      </mat-icon>\n    </button>\n    {{node.name}}\n  </mat-tree-node>\n</mat-tree>\n","import {FlatTreeControl} from '@angular/cdk/tree';\nimport {Component} from '@angular/core';\nimport {MatTreeFlatDataSource, MatTreeFlattener} from '@angular/material/tree';\n\n/**\n * Food data with nested structure.\n * Each node has a name and an optiona list of children.\n */\ninterface FoodNode {\n  name: string;\n  children?: FoodNode[];\n}\n\nconst TREE_DATA: FoodNode[] = [\n  {\n    name: 'Fruit',\n    children: [\n      {name: 'Apple'},\n      {name: 'Banana'},\n      {name: 'Fruit loops'},\n    ]\n  }, {\n    name: 'Vegetables',\n    children: [\n      {\n        name: 'Green',\n        children: [\n          {name: 'Broccoli'},\n          {name: 'Brussel sprouts'},\n        ]\n      }, {\n        name: 'Orange',\n        children: [\n          {name: 'Pumpkins'},\n          {name: 'Carrots'},\n        ]\n      },\n    ]\n  },\n];\n\n/** Flat node with expandable and level information */\ninterface ExampleFlatNode {\n  expandable: boolean;\n  name: string;\n  level: number;\n}\n\n/**\n * @title Tree with flat nodes\n */\n@Component({\n  selector: 'tree-flat-overview-example',\n  templateUrl: 'tree-flat-overview-example.html',\n  styleUrls: ['tree-flat-overview-example.css'],\n})\nexport class TreeFlatOverviewExample {\n  private _transformer = (node: FoodNode, level: number) => {\n    return {\n      expandable: !!node.children && node.children.length > 0,\n      name: node.name,\n      level: level,\n    };\n  }\n\n  treeControl = new FlatTreeControl<ExampleFlatNode>(\n      node => node.level, node => node.expandable);\n\n  treeFlattener = new MatTreeFlattener(\n      this._transformer, node => node.level, node => node.expandable, node => node.children);\n\n  dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n  constructor() {\n    this.dataSource.data = TREE_DATA;\n  }\n\n  hasChild = (_: number, node: ExampleFlatNode) => node.expandable;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {FlatTreeControl} from '@angular/cdk/tree';\nimport {Component, Injectable} from '@angular/core';\nimport {MatTreeFlatDataSource, MatTreeFlattener} from '@angular/material/tree';\nimport {BehaviorSubject, Observable} from 'rxjs';\n\nconst LOAD_MORE = 'LOAD_MORE';\n\n/** Nested node */\nexport class LoadmoreNode {\n  childrenChange = new BehaviorSubject<LoadmoreNode[]>([]);\n\n  get children(): LoadmoreNode[] {\n    return this.childrenChange.value;\n  }\n\n  constructor(public item: string,\n              public hasChildren = false,\n              public loadMoreParentItem: string | null = null) {}\n}\n\n/** Flat node with expandable and level information */\nexport class LoadmoreFlatNode {\n  constructor(public item: string,\n              public level = 1,\n              public expandable = false,\n              public loadMoreParentItem: string | null = null) {}\n}\n\n/**\n * A database that only load part of the data initially. After user clicks on the `Load more`\n * button, more data will be loaded.\n */\n@Injectable()\nexport class LoadmoreDatabase {\n  batchNumber = 5;\n  dataChange = new BehaviorSubject<LoadmoreNode[]>([]);\n  nodeMap = new Map<string, LoadmoreNode>();\n\n  /** The data */\n  rootLevelNodes: string[] = ['Vegetables', 'Fruits'];\n  dataMap = new Map<string, string[]>([\n    ['Fruits', ['Apple', 'Orange', 'Banana']],\n    ['Vegetables', ['Tomato', 'Potato', 'Onion']],\n    ['Apple', ['Fuji', 'Macintosh']],\n    ['Onion', ['Yellow', 'White', 'Purple', 'Green', 'Shallot', 'Sweet', 'Red', 'Leek']],\n  ]);\n\n  initialize() {\n    const data = this.rootLevelNodes.map(name => this._generateNode(name));\n    this.dataChange.next(data);\n  }\n\n  /** Expand a node whose children are not loaded */\n  loadMore(item: string, onlyFirstTime = false) {\n    if (!this.nodeMap.has(item) || !this.dataMap.has(item)) {\n      return;\n    }\n    const parent = this.nodeMap.get(item)!;\n    const children = this.dataMap.get(item)!;\n    if (onlyFirstTime && parent.children!.length > 0) {\n      return;\n    }\n    const newChildrenNumber = parent.children!.length + this.batchNumber;\n    const nodes = children.slice(0, newChildrenNumber)\n      .map(name => this._generateNode(name));\n    if (newChildrenNumber < children.length) {\n      // Need a new load more node\n      nodes.push(new LoadmoreNode(LOAD_MORE, false, item));\n    }\n\n    parent.childrenChange.next(nodes);\n    this.dataChange.next(this.dataChange.value);\n  }\n\n  private _generateNode(item: string): LoadmoreNode {\n    if (this.nodeMap.has(item)) {\n      return this.nodeMap.get(item)!;\n    }\n    const result = new LoadmoreNode(item, this.dataMap.has(item));\n    this.nodeMap.set(item, result);\n    return result;\n  }\n}\n\n/**\n * @title Tree with partially loaded data\n */\n@Component({\n  selector: 'tree-loadmore-example',\n  templateUrl: 'tree-loadmore-example.html',\n  styleUrls: ['tree-loadmore-example.css'],\n  providers: [LoadmoreDatabase]\n})\nexport class TreeLoadmoreExample {\n  nodeMap = new Map<string, LoadmoreFlatNode>();\n  treeControl: FlatTreeControl<LoadmoreFlatNode>;\n  treeFlattener: MatTreeFlattener<LoadmoreNode, LoadmoreFlatNode>;\n  // Flat tree data source\n  dataSource: MatTreeFlatDataSource<LoadmoreNode, LoadmoreFlatNode>;\n\n  constructor(private _database: LoadmoreDatabase) {\n    this.treeFlattener = new MatTreeFlattener(this.transformer, this.getLevel,\n      this.isExpandable, this.getChildren);\n\n    this.treeControl = new FlatTreeControl<LoadmoreFlatNode>(this.getLevel, this.isExpandable);\n\n    this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n    _database.dataChange.subscribe(data => {\n      this.dataSource.data = data;\n    });\n\n    _database.initialize();\n  }\n\n  getChildren = (node: LoadmoreNode): Observable<LoadmoreNode[]> => node.childrenChange;\n\n  transformer = (node: LoadmoreNode, level: number) => {\n    const existingNode = this.nodeMap.get(node.item);\n\n    if (existingNode) {\n      return existingNode;\n    }\n\n    const newNode =\n        new LoadmoreFlatNode(node.item, level, node.hasChildren, node.loadMoreParentItem);\n    this.nodeMap.set(node.item, newNode);\n    return newNode;\n  }\n\n  getLevel = (node: LoadmoreFlatNode) => node.level;\n\n  isExpandable = (node: LoadmoreFlatNode) => node.expandable;\n\n  hasChild = (_: number, _nodeData: LoadmoreFlatNode) => _nodeData.expandable;\n\n  isLoadMore = (_: number, _nodeData: LoadmoreFlatNode) => _nodeData.item === LOAD_MORE;\n\n  /** Load more nodes from data source */\n  loadMore(item: string) {\n    this._database.loadMore(item);\n  }\n\n  loadChildren(node: LoadmoreFlatNode) {\n    this._database.loadMore(node.item, true);\n  }\n}\n","<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n  <!-- Leaf node -->\n  <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodePadding>\n    <button mat-icon-button disabled></button>\n    {{node.item}}\n  </mat-tree-node>\n\n  <!-- expandable node -->\n  <mat-tree-node *matTreeNodeDef=\"let node; when: hasChild\" matTreeNodePadding>\n    <button mat-icon-button\n            [attr.aria-label]=\"'toggle ' + node.filename\"\n            (click)=\"loadChildren(node)\"\n            matTreeNodeToggle>\n      <mat-icon class=\"mat-icon-rtl-mirror\">\n        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n      </mat-icon>\n    </button>\n    {{node.item}}\n  </mat-tree-node>\n\n  <mat-tree-node *matTreeNodeDef=\"let node; when: isLoadMore\">\n    <button mat-button (click)=\"loadMore(node.loadMoreParentItem)\">\n      Load more...\n    </button>\n  </mat-tree-node>\n</mat-tree>\n","<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\" class=\"example-tree\">\n  <!-- This is the tree node template for leaf nodes -->\n  <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodeToggle>\n    <li class=\"mat-tree-node\">\n      <!-- use a disabled button to provide padding for tree leaf -->\n      <button mat-icon-button disabled></button>\n      {{node.name}}\n    </li>\n  </mat-tree-node>\n  <!-- This is the tree node template for expandable nodes -->\n  <mat-nested-tree-node *matTreeNodeDef=\"let node; when: hasChild\">\n    <li>\n      <div class=\"mat-tree-node\">\n        <button mat-icon-button matTreeNodeToggle\n                [attr.aria-label]=\"'toggle ' + node.name\">\n          <mat-icon class=\"mat-icon-rtl-mirror\">\n            {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n          </mat-icon>\n        </button>\n        {{node.name}}\n      </div>\n      <ul [class.example-tree-invisible]=\"!treeControl.isExpanded(node)\">\n        <ng-container matTreeNodeOutlet></ng-container>\n      </ul>\n    </li>\n  </mat-nested-tree-node>\n</mat-tree>\n","import {NestedTreeControl} from '@angular/cdk/tree';\nimport {Component} from '@angular/core';\nimport {MatTreeNestedDataSource} from '@angular/material/tree';\n\n/**\n * Food data with nested structure.\n * Each node has a name and an optiona list of children.\n */\ninterface FoodNode {\n  name: string;\n  children?: FoodNode[];\n}\n\nconst TREE_DATA: FoodNode[] = [\n  {\n    name: 'Fruit',\n    children: [\n      {name: 'Apple'},\n      {name: 'Banana'},\n      {name: 'Fruit loops'},\n    ]\n  }, {\n    name: 'Vegetables',\n    children: [\n      {\n        name: 'Green',\n        children: [\n          {name: 'Broccoli'},\n          {name: 'Brussel sprouts'},\n        ]\n      }, {\n        name: 'Orange',\n        children: [\n          {name: 'Pumpkins'},\n          {name: 'Carrots'},\n        ]\n      },\n    ]\n  },\n];\n\n/**\n * @title Tree with nested nodes\n */\n@Component({\n  selector: 'tree-nested-overview-example',\n  templateUrl: 'tree-nested-overview-example.html',\n  styleUrls: ['tree-nested-overview-example.css'],\n})\nexport class TreeNestedOverviewExample {\n  treeControl = new NestedTreeControl<FoodNode>(node => node.children);\n  dataSource = new MatTreeNestedDataSource<FoodNode>();\n\n  constructor() {\n    this.dataSource.data = TREE_DATA;\n  }\n\n  hasChild = (_: number, node: FoodNode) => !!node.children && node.children.length > 0;\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {MatTreeModule} from '@angular/material/tree';\nimport {TreeChecklistExample} from './tree-checklist/tree-checklist-example';\nimport {TreeDynamicExample} from './tree-dynamic/tree-dynamic-example';\nimport {TreeFlatOverviewExample} from './tree-flat-overview/tree-flat-overview-example';\nimport {TreeLoadmoreExample} from './tree-loadmore/tree-loadmore-example';\nimport {TreeNestedOverviewExample} from './tree-nested-overview/tree-nested-overview-example';\n\nexport {\n  TreeChecklistExample,\n  TreeDynamicExample,\n  TreeFlatOverviewExample,\n  TreeLoadmoreExample,\n  TreeNestedOverviewExample,\n};\n\nconst EXAMPLES = [\n  TreeChecklistExample,\n  TreeDynamicExample,\n  TreeFlatOverviewExample,\n  TreeLoadmoreExample,\n  TreeNestedOverviewExample,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatCheckboxModule,\n    MatIconModule,\n    MatInputModule,\n    MatProgressBarModule,\n    MatTreeModule,\n  ],\n  declarations: EXAMPLES,\n  exports: EXAMPLES,\n})\nexport class TreeExamplesModule {\n}\n","/* tslint:disable */\n\n/**\n ******************************************************************************\n * DO NOT MANUALLY EDIT THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED.\n *\n * IMPORTANT: Due to a bug with the bazel ng_module rule, this file is now\n * checked into the repository. Please rebuild the example module by running\n * the following command: \"yarn gulp build-examples-module\"\n *\n * BUG: https://github.com/angular/angular/issues/30259\n ******************************************************************************/\n\nimport {NgModule} from '@angular/core';\n\nimport {FooterOverviewExample} from '@gsa-sam/components-examples/components/footer';import {TreeChecklistExample} from '@gsa-sam/components-examples/material/tree';import {TreeDynamicExample} from '@gsa-sam/components-examples/material/tree';import {TreeFlatOverviewExample} from '@gsa-sam/components-examples/material/tree';import {TreeLoadmoreExample} from '@gsa-sam/components-examples/material/tree';import {FooterExamplesModule} from '@gsa-sam/components-examples/components/footer';import {TreeExamplesModule} from '@gsa-sam/components-examples/material/tree';\n\nexport interface LiveExample {\n  title: string;\n  component: any;\n  additionalFiles?: string[];\n  selectorName?: string;\n}\n\nexport const EXAMPLE_COMPONENTS: {[key: string]: LiveExample} = {\"footer-overview\":{\"title\":\"Footer overview\",\"component\":FooterOverviewExample,\"additionalFiles\":[],\"selectorName\":\"\"},\"tree-checklist\":{\"title\":\"Tree with checkboxes\",\"component\":TreeChecklistExample,\"additionalFiles\":[],\"selectorName\":\"\"},\"tree-dynamic\":{\"title\":\"Tree with dynamic data\",\"component\":TreeDynamicExample,\"additionalFiles\":[],\"selectorName\":\"\"},\"tree-flat-overview\":{\"title\":\"Tree with flat nodes\",\"component\":TreeFlatOverviewExample,\"additionalFiles\":[],\"selectorName\":\"\"},\"tree-loadmore\":{\"title\":\"Tree with partially loaded data\",\"component\":TreeLoadmoreExample,\"additionalFiles\":[],\"selectorName\":\"\"}};\n\nexport const EXAMPLE_MODULES = [FooterExamplesModule, TreeExamplesModule];\n\nexport const EXAMPLE_LIST = [FooterOverviewExample, TreeChecklistExample, TreeDynamicExample, TreeFlatOverviewExample, TreeLoadmoreExample];\n\n@NgModule({\n  imports: EXAMPLE_MODULES,\n  exports: EXAMPLE_MODULES,\n  entryComponents: EXAMPLE_LIST,\n})\nexport class ExampleModule { }\n\n// Export all individual example components because ngtsc requires all\n// referenced components to be available in the top-level entry-point.\nexport {FooterOverviewExample, TreeChecklistExample, TreeDynamicExample, TreeFlatOverviewExample, TreeLoadmoreExample}\n","// The example-module file will be auto-generated. As soon as the\n// examples are being compiled, the module file will be generated.\nimport {EXAMPLE_COMPONENTS} from './example-module';\n\n/**\n * Example data\n *   with information about Component name, selector, files used in example, and path to examples\n */\nexport class ExampleData {\n\n  /** Description of the example. */\n  description: string;\n\n  /** List of files that are part of this example. */\n  exampleFiles: string[];\n\n  /** Selector name of the example component. */\n  selectorName: string;\n\n  /** Name of the file that contains the example component. */\n  indexFilename: string;\n\n  /**\n   * Name of the example component. For examples with multiple components, this property will\n   * include multiple components that are comma separated (e.g. dialog-overview)\n   */\n  componentName: string;\n\n  constructor(example: string) {\n    if (!example || !EXAMPLE_COMPONENTS.hasOwnProperty(example)) {\n      return;\n    }\n\n    const exampleConfig = EXAMPLE_COMPONENTS[example];\n\n    // TODO(tinayuangao): Do not hard-code extensions\n    this.exampleFiles = ['html', 'ts', 'css'].map(extension => `${example}-example.${extension}`);\n    this.selectorName = this.indexFilename = `${example}-example`;\n\n    if (exampleConfig.additionalFiles) {\n      this.exampleFiles.push(...exampleConfig.additionalFiles);\n    }\n\n    const exampleName = example.replace(/(?:^\\w|\\b\\w)/g, letter => letter.toUpperCase());\n\n    this.description = exampleConfig.title || exampleName.replace(/[\\-]+/g, ' ') + ' Example';\n    this.componentName = exampleConfig.selectorName ||\n                          exampleName.replace(/[\\-]+/g, '') + 'Example';\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i0.ɵɵelement","i0.ɵɵattribute","i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵelementContainer","i0.ɵɵadvance","i0.ɵɵproperty","i0.ɵɵtemplate","i0.ɵɵtextInterpolate","i0.ɵɵlistener","i0.ɵɵtextInterpolate1","TREE_DATA","i0.ɵɵclassProp","EXAMPLES"],"mappings":"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"}