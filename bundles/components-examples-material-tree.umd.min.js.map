{"version":3,"sources":["src/components-examples/components-examples-material-tree.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","componentsExamples","material","tree","common","core","button","checkbox","icon","input","progressBar","tslib","cdk","collections","rxjs","formField","this","i0","i2","i3","i6","i5","i1","i4","TreeChecklistExample_mat_tree_node_1_Template","rf","ctx","_r5","ɵɵgetCurrentView","ɵɵelementStart","ɵɵelement","ɵɵlistener","TreeChecklistExample_mat_tree_node_1_Template_mat_checkbox_change_2_listener","$event","ɵɵrestoreView","node_r3","$implicit","ɵɵnextContext","todoLeafItemSelectionToggle","ɵɵtext","ɵɵelementEnd","ctx_r0","ɵɵadvance","ɵɵproperty","checklistSelection","isSelected","ɵɵtextInterpolate","item","TreeChecklistExample_mat_tree_node_2_Template","_r9","TreeChecklistExample_mat_tree_node_2_Template_button_click_5_listener","node_r6","_r7","ɵɵreference","saveNode","value","TreeChecklistExample_mat_tree_node_3_Template","_r12","TreeChecklistExample_mat_tree_node_3_Template_mat_checkbox_change_4_listener","node_r10","todoItemSelectionToggle","TreeChecklistExample_mat_tree_node_3_Template_button_click_6_listener","addNewItem","ctx_r2","ɵɵattribute","filename","ɵɵtextInterpolate1","treeControl","isExpanded","descendantsAllSelected","descendantsPartiallySelected","TodoItemNode","TodoItemFlatNode","TREE_DATA","Groceries","Almond Meal flour","Organic eggs","Protein Powder","Fruits","Apple","Berries","Orange","Reminders","ChecklistDatabase","dataChange","BehaviorSubject","initialize","Object","defineProperty","prototype","get","enumerable","configurable","data","buildFileTree","next","obj","level","_this","keys","reduce","accumulator","key","node","children","concat","insertItem","parent","name","push","updateItem","decorators","type","Injectable","ctorParameters","ɵfac","ChecklistDatabase_Factory","t","ɵprov","ɵɵdefineInjectable","token","providedIn","TreeChecklistExample","_database","flatNodeMap","Map","nestedNodeMap","selectedParent","newItemName","SelectionModel","getLevel","isExpandable","expandable","getChildren","hasChild","_","_nodeData","hasNoContent","transformer","existingNode","flatNode","set","treeFlattener","MatTreeFlattener","FlatTreeControl","dataSource","MatTreeFlatDataSource","subscribe","getDescendants","every","child","some","_a","_b","toggle","descendants","select","apply","__spread","deselect","checkAllParentsSelection","getParentNode","checkRootNodeSelection","nodeSelected","descAllSelected","currentLevel","i","dataNodes","indexOf","currentNode","parentNode","expand","itemValue","nestedNode","Component","args","selector","templateUrl","styleUrls","providers","TreeChecklistExample_Factory","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","selectors","features","ɵɵProvidersFeature","decls","vars","consts","template","TreeChecklistExample_Template","ɵɵtemplate","directives","MatTree","MatTreeNodeDef","MatTreeNode","MatTreeNodeToggle","MatTreeNodePadding","MatButton","MatCheckbox","MatFormField","MatInput","MatIcon","styles","EXAMPLES","TreeExamplesModule","NgModule","imports","CommonModule","MatButtonModule","MatCheckboxModule","MatIconModule","MatInputModule","MatProgressBarModule","MatTreeModule","declarations","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","TreeExamplesModule_Factory","ngJitMode","ɵɵsetNgModuleScope"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('@angular/material/button'), require('@angular/material/checkbox'), require('@angular/material/icon'), require('@angular/material/input'), require('@angular/material/progress-bar'), require('@angular/material/tree'), require('tslib'), require('@angular/cdk/collections'), require('@angular/cdk/tree'), require('rxjs'), require('@angular/material/form-field')) :\n    typeof define === 'function' && define.amd ? define('@angular/components-examples/material/tree', ['exports', '@angular/common', '@angular/core', '@angular/material/button', '@angular/material/checkbox', '@angular/material/icon', '@angular/material/input', '@angular/material/progress-bar', '@angular/material/tree', 'tslib', '@angular/cdk/collections', '@angular/cdk/tree', 'rxjs', '@angular/material/form-field'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.componentsExamples = global.ng.componentsExamples || {}, global.ng.componentsExamples.material = global.ng.componentsExamples.material || {}, global.ng.componentsExamples.material.tree = {}), global.ng.common, global.ng.core, global.ng.material.button, global.ng.material.checkbox, global.ng.material.icon, global.ng.material.input, global.ng.material.progressBar, global.ng.material.tree, global.tslib, global.ng.cdk.collections, global.ng.cdk.tree, global.rxjs, global.ng.material.formField));\n}(this, (function (exports, common, i0, i2, i3, i6, i5, progressBar, i1, tslib, collections, tree, rxjs, i4) { 'use strict';\n\n    function TreeChecklistExample_mat_tree_node_1_Template(rf, ctx) { if (rf & 1) {\n        var _r5 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"mat-tree-node\", 3);\n        i0.ɵɵelement(1, \"button\", 4);\n        i0.ɵɵelementStart(2, \"mat-checkbox\", 5);\n        i0.ɵɵlistener(\"change\", function TreeChecklistExample_mat_tree_node_1_Template_mat_checkbox_change_2_listener($event) { i0.ɵɵrestoreView(_r5); var node_r3 = ctx.$implicit; var ctx_r4 = i0.ɵɵnextContext(); return ctx_r4.todoLeafItemSelectionToggle(node_r3); });\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        var node_r3 = ctx.$implicit;\n        var ctx_r0 = i0.ɵɵnextContext();\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"checked\", ctx_r0.checklistSelection.isSelected(node_r3));\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(node_r3.item);\n    } }\n    function TreeChecklistExample_mat_tree_node_2_Template(rf, ctx) { if (rf & 1) {\n        var _r9 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"mat-tree-node\", 6);\n        i0.ɵɵelement(1, \"button\", 4);\n        i0.ɵɵelementStart(2, \"mat-form-field\");\n        i0.ɵɵelement(3, \"input\", 7, 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"button\", 9);\n        i0.ɵɵlistener(\"click\", function TreeChecklistExample_mat_tree_node_2_Template_button_click_5_listener($event) { i0.ɵɵrestoreView(_r9); var node_r6 = ctx.$implicit; var _r7 = i0.ɵɵreference(4); var ctx_r8 = i0.ɵɵnextContext(); return ctx_r8.saveNode(node_r6, _r7.value); });\n        i0.ɵɵtext(6, \"Save\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n    } }\n    function TreeChecklistExample_mat_tree_node_3_Template(rf, ctx) { if (rf & 1) {\n        var _r12 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"mat-tree-node\", 6);\n        i0.ɵɵelementStart(1, \"button\", 10);\n        i0.ɵɵelementStart(2, \"mat-icon\", 11);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"mat-checkbox\", 12);\n        i0.ɵɵlistener(\"change\", function TreeChecklistExample_mat_tree_node_3_Template_mat_checkbox_change_4_listener($event) { i0.ɵɵrestoreView(_r12); var node_r10 = ctx.$implicit; var ctx_r11 = i0.ɵɵnextContext(); return ctx_r11.todoItemSelectionToggle(node_r10); });\n        i0.ɵɵtext(5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"button\", 13);\n        i0.ɵɵlistener(\"click\", function TreeChecklistExample_mat_tree_node_3_Template_button_click_6_listener($event) { i0.ɵɵrestoreView(_r12); var node_r10 = ctx.$implicit; var ctx_r13 = i0.ɵɵnextContext(); return ctx_r13.addNewItem(node_r10); });\n        i0.ɵɵelementStart(7, \"mat-icon\");\n        i0.ɵɵtext(8, \"add\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        var node_r10 = ctx.$implicit;\n        var ctx_r2 = i0.ɵɵnextContext();\n        i0.ɵɵadvance(1);\n        i0.ɵɵattribute(\"aria-label\", \"toggle \" + node_r10.filename);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx_r2.treeControl.isExpanded(node_r10) ? \"expand_more\" : \"chevron_right\", \" \");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"checked\", ctx_r2.descendantsAllSelected(node_r10))(\"indeterminate\", ctx_r2.descendantsPartiallySelected(node_r10));\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(node_r10.item);\n    } }\n    /**\n     * Node for to-do item\n     */\n    var TodoItemNode = /** @class */ (function () {\n        function TodoItemNode() {\n        }\n        return TodoItemNode;\n    }());\n    /** Flat to-do item node with expandable and level information */\n    var TodoItemFlatNode = /** @class */ (function () {\n        function TodoItemFlatNode() {\n        }\n        return TodoItemFlatNode;\n    }());\n    /**\n     * The Json object for to-do list data.\n     */\n    var TREE_DATA = {\n        Groceries: {\n            'Almond Meal flour': null,\n            'Organic eggs': null,\n            'Protein Powder': null,\n            Fruits: {\n                Apple: null,\n                Berries: ['Blueberry', 'Raspberry'],\n                Orange: null\n            }\n        },\n        Reminders: [\n            'Cook dinner',\n            'Read the Material Design spec',\n            'Upgrade Application to Angular'\n        ]\n    };\n    /**\n     * Checklist database, it can build a tree structured Json object.\n     * Each node in Json object represents a to-do item or a category.\n     * If a node is a category, it has children items and new items can be added under the category.\n     */\n    var ChecklistDatabase = /** @class */ (function () {\n        function ChecklistDatabase() {\n            this.dataChange = new rxjs.BehaviorSubject([]);\n            this.initialize();\n        }\n        Object.defineProperty(ChecklistDatabase.prototype, \"data\", {\n            get: function () { return this.dataChange.value; },\n            enumerable: true,\n            configurable: true\n        });\n        ChecklistDatabase.prototype.initialize = function () {\n            // Build the tree nodes from Json object. The result is a list of `TodoItemNode` with nested\n            //     file node as children.\n            var data = this.buildFileTree(TREE_DATA, 0);\n            // Notify the change.\n            this.dataChange.next(data);\n        };\n        /**\n         * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n         * The return value is the list of `TodoItemNode`.\n         */\n        ChecklistDatabase.prototype.buildFileTree = function (obj, level) {\n            var _this = this;\n            return Object.keys(obj).reduce(function (accumulator, key) {\n                var value = obj[key];\n                var node = new TodoItemNode();\n                node.item = key;\n                if (value != null) {\n                    if (typeof value === 'object') {\n                        node.children = _this.buildFileTree(value, level + 1);\n                    }\n                    else {\n                        node.item = value;\n                    }\n                }\n                return accumulator.concat(node);\n            }, []);\n        };\n        /** Add an item to to-do list */\n        ChecklistDatabase.prototype.insertItem = function (parent, name) {\n            if (parent.children) {\n                parent.children.push({ item: name });\n                this.dataChange.next(this.data);\n            }\n        };\n        ChecklistDatabase.prototype.updateItem = function (node, name) {\n            node.item = name;\n            this.dataChange.next(this.data);\n        };\n        ChecklistDatabase.decorators = [\n            { type: i0.Injectable },\n        ];\n        /** @nocollapse */\n        ChecklistDatabase.ctorParameters = function () { return []; };\n        ChecklistDatabase.ɵfac = function ChecklistDatabase_Factory(t) { return new (t || ChecklistDatabase)(); };\n        ChecklistDatabase.ɵprov = i0.ɵɵdefineInjectable({ token: ChecklistDatabase, factory: function (t) { return ChecklistDatabase.ɵfac(t); }, providedIn: null });\n        return ChecklistDatabase;\n    }());\n    /*@__PURE__*/ (function () { i0.ɵsetClassMetadata(ChecklistDatabase, [{\n            type: i0.Injectable\n        }], function () { return []; }, null); })();\n    /**\n     * @title Tree with checkboxes\n     */\n    var TreeChecklistExample = /** @class */ (function () {\n        function TreeChecklistExample(_database) {\n            var _this = this;\n            this._database = _database;\n            /** Map from flat node to nested node. This helps us finding the nested node to be modified */\n            this.flatNodeMap = new Map();\n            /** Map from nested node to flattened node. This helps us to keep the same object for selection */\n            this.nestedNodeMap = new Map();\n            /** A selected parent node to be inserted */\n            this.selectedParent = null;\n            /** The new item's name */\n            this.newItemName = '';\n            /** The selection for checklist */\n            this.checklistSelection = new collections.SelectionModel(true /* multiple */);\n            this.getLevel = function (node) { return node.level; };\n            this.isExpandable = function (node) { return node.expandable; };\n            this.getChildren = function (node) { return node.children; };\n            this.hasChild = function (_, _nodeData) { return _nodeData.expandable; };\n            this.hasNoContent = function (_, _nodeData) { return _nodeData.item === ''; };\n            /**\n             * Transformer to convert nested node to flat node. Record the nodes in maps for later use.\n             */\n            this.transformer = function (node, level) {\n                var existingNode = _this.nestedNodeMap.get(node);\n                var flatNode = existingNode && existingNode.item === node.item\n                    ? existingNode\n                    : new TodoItemFlatNode();\n                flatNode.item = node.item;\n                flatNode.level = level;\n                flatNode.expandable = !!node.children;\n                _this.flatNodeMap.set(flatNode, node);\n                _this.nestedNodeMap.set(node, flatNode);\n                return flatNode;\n            };\n            this.treeFlattener = new i1.MatTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n            this.treeControl = new tree.FlatTreeControl(this.getLevel, this.isExpandable);\n            this.dataSource = new i1.MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n            _database.dataChange.subscribe(function (data) {\n                _this.dataSource.data = data;\n            });\n        }\n        /** Whether all the descendants of the node are selected. */\n        TreeChecklistExample.prototype.descendantsAllSelected = function (node) {\n            var _this = this;\n            var descendants = this.treeControl.getDescendants(node);\n            var descAllSelected = descendants.every(function (child) {\n                return _this.checklistSelection.isSelected(child);\n            });\n            return descAllSelected;\n        };\n        /** Whether part of the descendants are selected */\n        TreeChecklistExample.prototype.descendantsPartiallySelected = function (node) {\n            var _this = this;\n            var descendants = this.treeControl.getDescendants(node);\n            var result = descendants.some(function (child) { return _this.checklistSelection.isSelected(child); });\n            return result && !this.descendantsAllSelected(node);\n        };\n        /** Toggle the to-do item selection. Select/deselect all the descendants node */\n        TreeChecklistExample.prototype.todoItemSelectionToggle = function (node) {\n            var _a, _b;\n            var _this = this;\n            this.checklistSelection.toggle(node);\n            var descendants = this.treeControl.getDescendants(node);\n            this.checklistSelection.isSelected(node)\n                ? (_a = this.checklistSelection).select.apply(_a, tslib.__spread(descendants)) : (_b = this.checklistSelection).deselect.apply(_b, tslib.__spread(descendants));\n            // Force update for the parent\n            descendants.every(function (child) {\n                return _this.checklistSelection.isSelected(child);\n            });\n            this.checkAllParentsSelection(node);\n        };\n        /** Toggle a leaf to-do item selection. Check all the parents to see if they changed */\n        TreeChecklistExample.prototype.todoLeafItemSelectionToggle = function (node) {\n            this.checklistSelection.toggle(node);\n            this.checkAllParentsSelection(node);\n        };\n        /* Checks all the parents when a leaf node is selected/unselected */\n        TreeChecklistExample.prototype.checkAllParentsSelection = function (node) {\n            var parent = this.getParentNode(node);\n            while (parent) {\n                this.checkRootNodeSelection(parent);\n                parent = this.getParentNode(parent);\n            }\n        };\n        /** Check root node checked state and change it accordingly */\n        TreeChecklistExample.prototype.checkRootNodeSelection = function (node) {\n            var _this = this;\n            var nodeSelected = this.checklistSelection.isSelected(node);\n            var descendants = this.treeControl.getDescendants(node);\n            var descAllSelected = descendants.every(function (child) {\n                return _this.checklistSelection.isSelected(child);\n            });\n            if (nodeSelected && !descAllSelected) {\n                this.checklistSelection.deselect(node);\n            }\n            else if (!nodeSelected && descAllSelected) {\n                this.checklistSelection.select(node);\n            }\n        };\n        /* Get the parent node of a node */\n        TreeChecklistExample.prototype.getParentNode = function (node) {\n            var currentLevel = this.getLevel(node);\n            if (currentLevel < 1) {\n                return null;\n            }\n            var startIndex = this.treeControl.dataNodes.indexOf(node) - 1;\n            for (var i = startIndex; i >= 0; i--) {\n                var currentNode = this.treeControl.dataNodes[i];\n                if (this.getLevel(currentNode) < currentLevel) {\n                    return currentNode;\n                }\n            }\n            return null;\n        };\n        /** Select the category so we can insert the new item. */\n        TreeChecklistExample.prototype.addNewItem = function (node) {\n            var parentNode = this.flatNodeMap.get(node);\n            this._database.insertItem(parentNode, '');\n            this.treeControl.expand(node);\n        };\n        /** Save the node to database */\n        TreeChecklistExample.prototype.saveNode = function (node, itemValue) {\n            var nestedNode = this.flatNodeMap.get(node);\n            this._database.updateItem(nestedNode, itemValue);\n        };\n        TreeChecklistExample.decorators = [\n            { type: i0.Component, args: [{\n                        selector: 'tree-checklist-example',\n                        templateUrl: 'tree-checklist-example.html',\n                        styleUrls: ['tree-checklist-example.css'],\n                        providers: [ChecklistDatabase]\n                    },] },\n        ];\n        /** @nocollapse */\n        TreeChecklistExample.ctorParameters = function () { return [\n            { type: ChecklistDatabase }\n        ]; };\n        TreeChecklistExample.ɵfac = function TreeChecklistExample_Factory(t) { return new (t || TreeChecklistExample)(i0.ɵɵdirectiveInject(ChecklistDatabase)); };\n        TreeChecklistExample.ɵcmp = i0.ɵɵdefineComponent({ type: TreeChecklistExample, selectors: [[\"tree-checklist-example\"]], features: [i0.ɵɵProvidersFeature([ChecklistDatabase])], decls: 4, vars: 4, consts: [[3, \"dataSource\", \"treeControl\"], [\"matTreeNodeToggle\", \"\", \"matTreeNodePadding\", \"\", 4, \"matTreeNodeDef\"], [\"matTreeNodePadding\", \"\", 4, \"matTreeNodeDef\", \"matTreeNodeDefWhen\"], [\"matTreeNodeToggle\", \"\", \"matTreeNodePadding\", \"\"], [\"mat-icon-button\", \"\", \"disabled\", \"\"], [1, \"checklist-leaf-node\", 3, \"checked\", \"change\"], [\"matTreeNodePadding\", \"\"], [\"matInput\", \"\", \"placeholder\", \"New item...\"], [\"itemValue\", \"\"], [\"mat-button\", \"\", 3, \"click\"], [\"mat-icon-button\", \"\", \"matTreeNodeToggle\", \"\"], [1, \"mat-icon-rtl-mirror\"], [3, \"checked\", \"indeterminate\", \"change\"], [\"mat-icon-button\", \"\", 3, \"click\"]], template: function TreeChecklistExample_Template(rf, ctx) { if (rf & 1) {\n                i0.ɵɵelementStart(0, \"mat-tree\", 0);\n                i0.ɵɵtemplate(1, TreeChecklistExample_mat_tree_node_1_Template, 4, 2, \"mat-tree-node\", 1);\n                i0.ɵɵtemplate(2, TreeChecklistExample_mat_tree_node_2_Template, 7, 0, \"mat-tree-node\", 2);\n                i0.ɵɵtemplate(3, TreeChecklistExample_mat_tree_node_3_Template, 9, 5, \"mat-tree-node\", 2);\n                i0.ɵɵelementEnd();\n            } if (rf & 2) {\n                i0.ɵɵproperty(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n                i0.ɵɵadvance(2);\n                i0.ɵɵproperty(\"matTreeNodeDefWhen\", ctx.hasNoContent);\n                i0.ɵɵadvance(1);\n                i0.ɵɵproperty(\"matTreeNodeDefWhen\", ctx.hasChild);\n            } }, directives: [i1.MatTree, i1.MatTreeNodeDef, i1.MatTreeNode, i1.MatTreeNodeToggle, i1.MatTreeNodePadding, i2.MatButton, i3.MatCheckbox, i4.MatFormField, i5.MatInput, i6.MatIcon], styles: [\"\"] });\n        return TreeChecklistExample;\n    }());\n    /*@__PURE__*/ (function () { i0.ɵsetClassMetadata(TreeChecklistExample, [{\n            type: i0.Component,\n            args: [{\n                    selector: 'tree-checklist-example',\n                    templateUrl: 'tree-checklist-example.html',\n                    styleUrls: ['tree-checklist-example.css'],\n                    providers: [ChecklistDatabase]\n                }]\n        }], function () { return [{ type: ChecklistDatabase }]; }, null); })();\n\n    var EXAMPLES = [\n        TreeChecklistExample,\n    ];\n    var TreeExamplesModule = /** @class */ (function () {\n        function TreeExamplesModule() {\n        }\n        TreeExamplesModule.decorators = [\n            { type: i0.NgModule, args: [{\n                        imports: [\n                            common.CommonModule,\n                            i2.MatButtonModule,\n                            i3.MatCheckboxModule,\n                            i6.MatIconModule,\n                            i5.MatInputModule,\n                            progressBar.MatProgressBarModule,\n                            i1.MatTreeModule,\n                        ],\n                        declarations: EXAMPLES,\n                        exports: EXAMPLES,\n                    },] },\n        ];\n        TreeExamplesModule.ɵmod = i0.ɵɵdefineNgModule({ type: TreeExamplesModule });\n        TreeExamplesModule.ɵinj = i0.ɵɵdefineInjector({ factory: function TreeExamplesModule_Factory(t) { return new (t || TreeExamplesModule)(); }, imports: [[\n                    common.CommonModule,\n                    i2.MatButtonModule,\n                    i3.MatCheckboxModule,\n                    i6.MatIconModule,\n                    i5.MatInputModule,\n                    progressBar.MatProgressBarModule,\n                    i1.MatTreeModule,\n                ]] });\n        return TreeExamplesModule;\n    }());\n    (function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(TreeExamplesModule, { declarations: [TreeChecklistExample], imports: [common.CommonModule,\n            i2.MatButtonModule,\n            i3.MatCheckboxModule,\n            i6.MatIconModule,\n            i5.MatInputModule,\n            progressBar.MatProgressBarModule,\n            i1.MatTreeModule], exports: [TreeChecklistExample] }); })();\n    /*@__PURE__*/ (function () { i0.ɵsetClassMetadata(TreeExamplesModule, [{\n            type: i0.NgModule,\n            args: [{\n                    imports: [\n                        common.CommonModule,\n                        i2.MatButtonModule,\n                        i3.MatCheckboxModule,\n                        i6.MatIconModule,\n                        i5.MatInputModule,\n                        progressBar.MatProgressBarModule,\n                        i1.MatTreeModule,\n                    ],\n                    declarations: EXAMPLES,\n                    exports: EXAMPLES,\n                }]\n        }], null, null); })();\n\n    exports.TreeChecklistExample = TreeChecklistExample;\n    exports.TreeExamplesModule = TreeExamplesModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=components-examples-material-tree.umd.js.map\n"]}