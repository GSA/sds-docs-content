{"version":3,"file":"components-examples-material-tree.umd.js","sources":["../../../../../../../src/components-examples/material/tree/tree-checklist/tree-checklist-example.html","../../../../../../../src/components-examples/material/tree/tree-checklist/tree-checklist-example.ts","../../../../../../../src/components-examples/material/tree/index.ts"],"sourcesContent":["<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n  <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodeToggle matTreeNodePadding>\n    <button mat-icon-button disabled></button>\n    <mat-checkbox class=\"checklist-leaf-node\"\n                  [checked]=\"checklistSelection.isSelected(node)\"\n                  (change)=\"todoLeafItemSelectionToggle(node)\">{{node.item}}</mat-checkbox>\n  </mat-tree-node>\n\n  <mat-tree-node *matTreeNodeDef=\"let node; when: hasNoContent\" matTreeNodePadding>\n    <button mat-icon-button disabled></button>\n    <mat-form-field>\n      <input matInput #itemValue placeholder=\"New item...\">\n    </mat-form-field>\n    <button mat-button (click)=\"saveNode(node, itemValue.value)\">Save</button>\n  </mat-tree-node>\n\n  <mat-tree-node *matTreeNodeDef=\"let node; when: hasChild\" matTreeNodePadding>\n    <button mat-icon-button matTreeNodeToggle\n            [attr.aria-label]=\"'toggle ' + node.filename\">\n      <mat-icon class=\"mat-icon-rtl-mirror\">\n        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n      </mat-icon>\n    </button>\n    <mat-checkbox [checked]=\"descendantsAllSelected(node)\"\n                  [indeterminate]=\"descendantsPartiallySelected(node)\"\n                  (change)=\"todoItemSelectionToggle(node)\">{{node.item}}</mat-checkbox>\n    <button mat-icon-button (click)=\"addNewItem(node)\"><mat-icon>add</mat-icon></button>\n  </mat-tree-node>\n</mat-tree>\n","import {SelectionModel} from '@angular/cdk/collections';\nimport {FlatTreeControl} from '@angular/cdk/tree';\nimport {Component, Injectable} from '@angular/core';\nimport {MatTreeFlatDataSource, MatTreeFlattener} from '@angular/material/tree';\nimport {BehaviorSubject} from 'rxjs';\n\n/**\n * Node for to-do item\n */\nexport class TodoItemNode {\n  children: TodoItemNode[];\n  item: string;\n}\n\n/** Flat to-do item node with expandable and level information */\nexport class TodoItemFlatNode {\n  item: string;\n  level: number;\n  expandable: boolean;\n}\n\n/**\n * The Json object for to-do list data.\n */\nconst TREE_DATA = {\n  Groceries: {\n    'Almond Meal flour': null,\n    'Organic eggs': null,\n    'Protein Powder': null,\n    Fruits: {\n      Apple: null,\n      Berries: ['Blueberry', 'Raspberry'],\n      Orange: null\n    }\n  },\n  Reminders: [\n    'Cook dinner',\n    'Read the Material Design spec',\n    'Upgrade Application to Angular'\n  ]\n};\n\n/**\n * Checklist database, it can build a tree structured Json object.\n * Each node in Json object represents a to-do item or a category.\n * If a node is a category, it has children items and new items can be added under the category.\n */\n@Injectable()\nexport class ChecklistDatabase {\n  dataChange = new BehaviorSubject<TodoItemNode[]>([]);\n\n  get data(): TodoItemNode[] { return this.dataChange.value; }\n\n  constructor() {\n    this.initialize();\n  }\n\n  initialize() {\n    // Build the tree nodes from Json object. The result is a list of `TodoItemNode` with nested\n    //     file node as children.\n    const data = this.buildFileTree(TREE_DATA, 0);\n\n    // Notify the change.\n    this.dataChange.next(data);\n  }\n\n  /**\n   * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n   * The return value is the list of `TodoItemNode`.\n   */\n  buildFileTree(obj: {[key: string]: any}, level: number): TodoItemNode[] {\n    return Object.keys(obj).reduce<TodoItemNode[]>((accumulator, key) => {\n      const value = obj[key];\n      const node = new TodoItemNode();\n      node.item = key;\n\n      if (value != null) {\n        if (typeof value === 'object') {\n          node.children = this.buildFileTree(value, level + 1);\n        } else {\n          node.item = value;\n        }\n      }\n\n      return accumulator.concat(node);\n    }, []);\n  }\n\n  /** Add an item to to-do list */\n  insertItem(parent: TodoItemNode, name: string) {\n    if (parent.children) {\n      parent.children.push({item: name} as TodoItemNode);\n      this.dataChange.next(this.data);\n    }\n  }\n\n  updateItem(node: TodoItemNode, name: string) {\n    node.item = name;\n    this.dataChange.next(this.data);\n  }\n}\n\n/**\n * @title Tree with checkboxes\n */\n@Component({\n  selector: 'tree-checklist-example',\n  templateUrl: 'tree-checklist-example.html',\n  styleUrls: ['tree-checklist-example.css'],\n  providers: [ChecklistDatabase]\n})\nexport class TreeChecklistExample {\n  /** Map from flat node to nested node. This helps us finding the nested node to be modified */\n  flatNodeMap = new Map<TodoItemFlatNode, TodoItemNode>();\n\n  /** Map from nested node to flattened node. This helps us to keep the same object for selection */\n  nestedNodeMap = new Map<TodoItemNode, TodoItemFlatNode>();\n\n  /** A selected parent node to be inserted */\n  selectedParent: TodoItemFlatNode | null = null;\n\n  /** The new item's name */\n  newItemName = '';\n\n  treeControl: FlatTreeControl<TodoItemFlatNode>;\n\n  treeFlattener: MatTreeFlattener<TodoItemNode, TodoItemFlatNode>;\n\n  dataSource: MatTreeFlatDataSource<TodoItemNode, TodoItemFlatNode>;\n\n  /** The selection for checklist */\n  checklistSelection = new SelectionModel<TodoItemFlatNode>(true /* multiple */);\n\n  constructor(private _database: ChecklistDatabase) {\n    this.treeFlattener = new MatTreeFlattener(this.transformer, this.getLevel,\n      this.isExpandable, this.getChildren);\n    this.treeControl = new FlatTreeControl<TodoItemFlatNode>(this.getLevel, this.isExpandable);\n    this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n    _database.dataChange.subscribe(data => {\n      this.dataSource.data = data;\n    });\n  }\n\n  getLevel = (node: TodoItemFlatNode) => node.level;\n\n  isExpandable = (node: TodoItemFlatNode) => node.expandable;\n\n  getChildren = (node: TodoItemNode): TodoItemNode[] => node.children;\n\n  hasChild = (_: number, _nodeData: TodoItemFlatNode) => _nodeData.expandable;\n\n  hasNoContent = (_: number, _nodeData: TodoItemFlatNode) => _nodeData.item === '';\n\n  /**\n   * Transformer to convert nested node to flat node. Record the nodes in maps for later use.\n   */\n  transformer = (node: TodoItemNode, level: number) => {\n    const existingNode = this.nestedNodeMap.get(node);\n    const flatNode = existingNode && existingNode.item === node.item\n        ? existingNode\n        : new TodoItemFlatNode();\n    flatNode.item = node.item;\n    flatNode.level = level;\n    flatNode.expandable = !!node.children;\n    this.flatNodeMap.set(flatNode, node);\n    this.nestedNodeMap.set(node, flatNode);\n    return flatNode;\n  }\n\n  /** Whether all the descendants of the node are selected. */\n  descendantsAllSelected(node: TodoItemFlatNode): boolean {\n    const descendants = this.treeControl.getDescendants(node);\n    const descAllSelected = descendants.every(child =>\n      this.checklistSelection.isSelected(child)\n    );\n    return descAllSelected;\n  }\n\n  /** Whether part of the descendants are selected */\n  descendantsPartiallySelected(node: TodoItemFlatNode): boolean {\n    const descendants = this.treeControl.getDescendants(node);\n    const result = descendants.some(child => this.checklistSelection.isSelected(child));\n    return result && !this.descendantsAllSelected(node);\n  }\n\n  /** Toggle the to-do item selection. Select/deselect all the descendants node */\n  todoItemSelectionToggle(node: TodoItemFlatNode): void {\n    this.checklistSelection.toggle(node);\n    const descendants = this.treeControl.getDescendants(node);\n    this.checklistSelection.isSelected(node)\n      ? this.checklistSelection.select(...descendants)\n      : this.checklistSelection.deselect(...descendants);\n\n    // Force update for the parent\n    descendants.every(child =>\n      this.checklistSelection.isSelected(child)\n    );\n    this.checkAllParentsSelection(node);\n  }\n\n  /** Toggle a leaf to-do item selection. Check all the parents to see if they changed */\n  todoLeafItemSelectionToggle(node: TodoItemFlatNode): void {\n    this.checklistSelection.toggle(node);\n    this.checkAllParentsSelection(node);\n  }\n\n  /* Checks all the parents when a leaf node is selected/unselected */\n  checkAllParentsSelection(node: TodoItemFlatNode): void {\n    let parent: TodoItemFlatNode | null = this.getParentNode(node);\n    while (parent) {\n      this.checkRootNodeSelection(parent);\n      parent = this.getParentNode(parent);\n    }\n  }\n\n  /** Check root node checked state and change it accordingly */\n  checkRootNodeSelection(node: TodoItemFlatNode): void {\n    const nodeSelected = this.checklistSelection.isSelected(node);\n    const descendants = this.treeControl.getDescendants(node);\n    const descAllSelected = descendants.every(child =>\n      this.checklistSelection.isSelected(child)\n    );\n    if (nodeSelected && !descAllSelected) {\n      this.checklistSelection.deselect(node);\n    } else if (!nodeSelected && descAllSelected) {\n      this.checklistSelection.select(node);\n    }\n  }\n\n  /* Get the parent node of a node */\n  getParentNode(node: TodoItemFlatNode): TodoItemFlatNode | null {\n    const currentLevel = this.getLevel(node);\n\n    if (currentLevel < 1) {\n      return null;\n    }\n\n    const startIndex = this.treeControl.dataNodes.indexOf(node) - 1;\n\n    for (let i = startIndex; i >= 0; i--) {\n      const currentNode = this.treeControl.dataNodes[i];\n\n      if (this.getLevel(currentNode) < currentLevel) {\n        return currentNode;\n      }\n    }\n    return null;\n  }\n\n  /** Select the category so we can insert the new item. */\n  addNewItem(node: TodoItemFlatNode) {\n    const parentNode = this.flatNodeMap.get(node);\n    this._database.insertItem(parentNode!, '');\n    this.treeControl.expand(node);\n  }\n\n  /** Save the node to database */\n  saveNode(node: TodoItemFlatNode, itemValue: string) {\n    const nestedNode = this.flatNodeMap.get(node);\n    this._database.updateItem(nestedNode!, itemValue);\n  }\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {MatTreeModule} from '@angular/material/tree';\nimport {TreeChecklistExample} from './tree-checklist/tree-checklist-example';\n\nexport {\n  TreeChecklistExample,\n};\n\nconst EXAMPLES = [\n  TreeChecklistExample,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatCheckboxModule,\n    MatIconModule,\n    MatInputModule,\n    MatProgressBarModule,\n    MatTreeModule,\n  ],\n  declarations: EXAMPLES,\n  exports: EXAMPLES,\n})\nexport class TreeExamplesModule {\n}\n"],"names":["i0.ɵɵelementStart","i0.ɵɵelement","i0.ɵɵlistener","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵadvance","i0.ɵɵproperty","i0.ɵɵtextInterpolate","i0.ɵɵattribute","i0.ɵɵtextInterpolate1","BehaviorSubject","Injectable","SelectionModel","MatTreeFlattener","FlatTreeControl","MatTreeFlatDataSource","Component","i0.ɵɵtemplate","NgModule","CommonModule","MatButtonModule","MatCheckboxModule","MatIconModule","MatInputModule","MatProgressBarModule","MatTreeModule"],"mappings":"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"}